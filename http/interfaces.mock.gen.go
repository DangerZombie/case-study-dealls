// Code generated by MockGen. DO NOT EDIT.
// Source: http/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=http/interfaces.go -destination=http/interfaces.mock.gen.go -package=http
//

// Package http is a generated GoMock package.
package http

import (
	reflect "reflect"

	user_service "github.com/DangerZombie/case-study-dealls/service/user_service"
	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockHttp is a mock of Http interface.
type MockHttp struct {
	ctrl     *gomock.Controller
	recorder *MockHttpMockRecorder
}

// MockHttpMockRecorder is the mock recorder for MockHttp.
type MockHttpMockRecorder struct {
	mock *MockHttp
}

// NewMockHttp creates a new mock instance.
func NewMockHttp(ctrl *gomock.Controller) *MockHttp {
	mock := &MockHttp{ctrl: ctrl}
	mock.recorder = &MockHttpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttp) EXPECT() *MockHttpMockRecorder {
	return m.recorder
}

// UserHandler mocks base method.
func (m *MockHttp) UserHandler(group *echo.Group, s user_service.UserService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserHandler", group, s)
}

// UserHandler indicates an expected call of UserHandler.
func (mr *MockHttpMockRecorder) UserHandler(group, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHandler", reflect.TypeOf((*MockHttp)(nil).UserHandler), group, s)
}
