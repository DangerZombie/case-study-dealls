// Code generated by MockGen. DO NOT EDIT.
// Source: helper/auth/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=helper/auth/interfaces.go -destination=helper/auth/interfaces.mock.gen.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	http "net/http"
	reflect "reflect"

	parameter "github.com/DangerZombie/case-study-dealls/model/parameter"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthHelper is a mock of AuthHelper interface.
type MockAuthHelper struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHelperMockRecorder
}

// MockAuthHelperMockRecorder is the mock recorder for MockAuthHelper.
type MockAuthHelperMockRecorder struct {
	mock *MockAuthHelper
}

// NewMockAuthHelper creates a new mock instance.
func NewMockAuthHelper(ctrl *gomock.Controller) *MockAuthHelper {
	mock := &MockAuthHelper{ctrl: ctrl}
	mock.recorder = &MockAuthHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHelper) EXPECT() *MockAuthHelperMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockAuthHelper) GenerateJWT(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockAuthHelperMockRecorder) GenerateJWT(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockAuthHelper)(nil).GenerateJWT), id)
}

// VerifyJWT mocks base method.
func (m *MockAuthHelper) VerifyJWT(headers http.Header) (parameter.JwtClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", headers)
	ret0, _ := ret[0].(parameter.JwtClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockAuthHelperMockRecorder) VerifyJWT(headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockAuthHelper)(nil).VerifyJWT), headers)
}
