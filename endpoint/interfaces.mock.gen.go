// Code generated by MockGen. DO NOT EDIT.
// Source: endpoint/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=endpoint/interfaces.go -destination=endpoint/interfaces.mock.gen.go -package=endpoint
//

// Package endpoint is a generated GoMock package.
package endpoint

import (
	reflect "reflect"

	user_service "github.com/DangerZombie/case-study-dealls/service/user_service"
	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockEndpoint is a mock of Endpoint interface.
type MockEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointMockRecorder
}

// MockEndpointMockRecorder is the mock recorder for MockEndpoint.
type MockEndpointMockRecorder struct {
	mock *MockEndpoint
}

// NewMockEndpoint creates a new mock instance.
func NewMockEndpoint(ctrl *gomock.Controller) *MockEndpoint {
	mock := &MockEndpoint{ctrl: ctrl}
	mock.recorder = &MockEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpoint) EXPECT() *MockEndpointMockRecorder {
	return m.recorder
}

// LoginRequest mocks base method.
func (m *MockEndpoint) LoginRequest(ctx echo.Context, s user_service.UserService) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginRequest", ctx, s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// LoginRequest indicates an expected call of LoginRequest.
func (mr *MockEndpointMockRecorder) LoginRequest(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRequest", reflect.TypeOf((*MockEndpoint)(nil).LoginRequest), ctx, s)
}

// RegisterUserRequest mocks base method.
func (m *MockEndpoint) RegisterUserRequest(ctx echo.Context, s user_service.UserService) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUserRequest", ctx, s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// RegisterUserRequest indicates an expected call of RegisterUserRequest.
func (mr *MockEndpointMockRecorder) RegisterUserRequest(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserRequest", reflect.TypeOf((*MockEndpoint)(nil).RegisterUserRequest), ctx, s)
}

// ShowUserProfileRequest mocks base method.
func (m *MockEndpoint) ShowUserProfileRequest(ctx echo.Context, s user_service.UserService) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowUserProfileRequest", ctx, s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// ShowUserProfileRequest indicates an expected call of ShowUserProfileRequest.
func (mr *MockEndpointMockRecorder) ShowUserProfileRequest(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowUserProfileRequest", reflect.TypeOf((*MockEndpoint)(nil).ShowUserProfileRequest), ctx, s)
}

// SubscriptionRequest mocks base method.
func (m *MockEndpoint) SubscriptionRequest(ctx echo.Context, s user_service.UserService) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionRequest", ctx, s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// SubscriptionRequest indicates an expected call of SubscriptionRequest.
func (mr *MockEndpointMockRecorder) SubscriptionRequest(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionRequest", reflect.TypeOf((*MockEndpoint)(nil).SubscriptionRequest), ctx, s)
}

// SwipeUserRequest mocks base method.
func (m *MockEndpoint) SwipeUserRequest(ctx echo.Context, s user_service.UserService) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwipeUserRequest", ctx, s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// SwipeUserRequest indicates an expected call of SwipeUserRequest.
func (mr *MockEndpointMockRecorder) SwipeUserRequest(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwipeUserRequest", reflect.TypeOf((*MockEndpoint)(nil).SwipeUserRequest), ctx, s)
}
