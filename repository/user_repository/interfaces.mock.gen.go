// Code generated by MockGen. DO NOT EDIT.
// Source: repository/user_repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/user_repository/interfaces.go -destination=repository/user_repository/interfaces.mock.gen.go -package=user_repository
//

// Package user_repository is a generated GoMock package.
package user_repository

import (
	reflect "reflect"

	parameter "github.com/DangerZombie/case-study-dealls/model/parameter"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateMatchUser mocks base method.
func (m *MockUserRepository) CreateMatchUser(db *gorm.DB, input parameter.CreateMatchUserInput) (parameter.CreateMatchUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatchUser", db, input)
	ret0, _ := ret[0].(parameter.CreateMatchUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatchUser indicates an expected call of CreateMatchUser.
func (mr *MockUserRepositoryMockRecorder) CreateMatchUser(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchUser", reflect.TypeOf((*MockUserRepository)(nil).CreateMatchUser), db, input)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(db *gorm.DB, input parameter.CreateUserInput) (parameter.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", db, input)
	ret0, _ := ret[0].(parameter.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), db, input)
}

// CreateUserInteraction mocks base method.
func (m *MockUserRepository) CreateUserInteraction(db *gorm.DB, input parameter.CreateUserInteractionInput) (parameter.CreateUserInteractionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserInteraction", db, input)
	ret0, _ := ret[0].(parameter.CreateUserInteractionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserInteraction indicates an expected call of CreateUserInteraction.
func (mr *MockUserRepositoryMockRecorder) CreateUserInteraction(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserInteraction", reflect.TypeOf((*MockUserRepository)(nil).CreateUserInteraction), db, input)
}

// FindMatchInteraction mocks base method.
func (m *MockUserRepository) FindMatchInteraction(db *gorm.DB, input parameter.FindMatchInteractionInput) (parameter.FindMatchInteractionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMatchInteraction", db, input)
	ret0, _ := ret[0].(parameter.FindMatchInteractionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMatchInteraction indicates an expected call of FindMatchInteraction.
func (mr *MockUserRepositoryMockRecorder) FindMatchInteraction(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMatchInteraction", reflect.TypeOf((*MockUserRepository)(nil).FindMatchInteraction), db, input)
}

// FindUserById mocks base method.
func (m *MockUserRepository) FindUserById(db *gorm.DB, input parameter.FindUserByIdInput) (parameter.FindUserByIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", db, input)
	ret0, _ := ret[0].(parameter.FindUserByIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUserRepositoryMockRecorder) FindUserById(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUserRepository)(nil).FindUserById), db, input)
}

// FindUserByUsernameAndPassword mocks base method.
func (m *MockUserRepository) FindUserByUsernameAndPassword(db *gorm.DB, input parameter.FindUserByUsernameAndPasswordInput) (parameter.FindUserByUsernameAndPasswordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsernameAndPassword", db, input)
	ret0, _ := ret[0].(parameter.FindUserByUsernameAndPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsernameAndPassword indicates an expected call of FindUserByUsernameAndPassword.
func (mr *MockUserRepositoryMockRecorder) FindUserByUsernameAndPassword(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsernameAndPassword", reflect.TypeOf((*MockUserRepository)(nil).FindUserByUsernameAndPassword), db, input)
}

// FindUserToSwipe mocks base method.
func (m *MockUserRepository) FindUserToSwipe(db *gorm.DB, input parameter.FindUserToSwipeInput) (parameter.FindUserToSwipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserToSwipe", db, input)
	ret0, _ := ret[0].(parameter.FindUserToSwipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserToSwipe indicates an expected call of FindUserToSwipe.
func (mr *MockUserRepositoryMockRecorder) FindUserToSwipe(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserToSwipe", reflect.TypeOf((*MockUserRepository)(nil).FindUserToSwipe), db, input)
}

// ResetSwipeCount mocks base method.
func (m *MockUserRepository) ResetSwipeCount(db *gorm.DB, input parameter.ResetSwipeCountInput) (parameter.ResetSwipeCountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSwipeCount", db, input)
	ret0, _ := ret[0].(parameter.ResetSwipeCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSwipeCount indicates an expected call of ResetSwipeCount.
func (mr *MockUserRepositoryMockRecorder) ResetSwipeCount(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSwipeCount", reflect.TypeOf((*MockUserRepository)(nil).ResetSwipeCount), db, input)
}

// UpdateSubscription mocks base method.
func (m *MockUserRepository) UpdateSubscription(db *gorm.DB, input parameter.UpdateSubscriptionInput) (parameter.UpdateSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", db, input)
	ret0, _ := ret[0].(parameter.UpdateSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockUserRepositoryMockRecorder) UpdateSubscription(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockUserRepository)(nil).UpdateSubscription), db, input)
}

// UpdateSwipeCount mocks base method.
func (m *MockUserRepository) UpdateSwipeCount(db *gorm.DB, input parameter.UpdateSwipeCountInput) (parameter.UpdateSwipeCountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSwipeCount", db, input)
	ret0, _ := ret[0].(parameter.UpdateSwipeCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSwipeCount indicates an expected call of UpdateSwipeCount.
func (mr *MockUserRepositoryMockRecorder) UpdateSwipeCount(db, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSwipeCount", reflect.TypeOf((*MockUserRepository)(nil).UpdateSwipeCount), db, input)
}
